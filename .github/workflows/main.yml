name: CI

on: [push, workflow_dispatch]

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Download
      run: Invoke-WebRequest https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip -OutFile ngrok.zip
    - name: Extract
      run: Expand-Archive ngrok.zip
    - name: Auth
      run: .\ngrok\ngrok.exe authtoken $Env:NGROK_AUTH_TOKEN
      env:
        NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
    - name: Enable TS
      run: |
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "UserAuthentication" -Value 1
        Set-LocalUser -Name "runneradmin" -Password (ConvertTo-SecureString -AsPlainText "Shahid@123" -Force)
    - name: Create Tunnel and Get URL
      run: |
        Start-Process -NoNewWindow -FilePath ".\ngrok\ngrok.exe" -ArgumentList "tcp 3389" -RedirectStandardOutput ngrok_output.txt
        # Wait for ngrok to start and write the URL
        Start-Sleep -Seconds 5
        $ngrok_url = Select-String -Path ngrok_output.txt -Pattern "tcp://(.+)" | ForEach-Object { $_.Matches.Groups[1].Value }
        if ($ngrok_url) {
          echo "::set-output name=ngrok_url::$ngrok_url"
          echo "RDP Connection URL: tcp://$ngrok_url"
        } else {
          echo "Failed to get ngrok URL"
          Get-Content ngrok_output.txt
        }
      id: ngrok
    - name: Show RDP Connection Info
      run: |
        echo "Use this address to connect via RDP:"
        echo "Address: ${{ steps.ngrok.outputs.ngrok_url }}"
        echo "Username: runneradmin"
        echo "Password: Shahid@123"
