name: IDM Installation CI

on: [push, workflow_dispatch]

jobs:
  idm-installation:
    runs-on: windows-latest

    steps:
    # Step 1: Setup RDP Access
    - name: Enable Remote Desktop
      run: |
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 1

    # Step 2: Create Admin User
    - name: Create Admin User
      run: |
        $password = ConvertTo-SecureString "P@ssw0rd123" -AsPlainText -Force
        New-LocalUser -Name "AdminUser" -Password $password -FullName "Admin User" -Description "Temporary admin for IDM installation"
        Add-LocalGroupMember -Group "Administrators" -Member "AdminUser"
        Write-Host "Admin user created successfully"

    # Step 3: Download IDM
    - name: Download IDM
      run: |
        $url = "https://dl2.soft98.ir/soft/i/Internet.Download.Manager.6.42.42.Final.zip?1754166781"
        $output = "$env:TEMP\idm.zip"
        Invoke-WebRequest -Uri $url -OutFile $output
        Write-Host "IDM downloaded successfully to $output"

    # Step 4: Extract IDM
    - name: Extract IDM
      run: |
        $zipFile = "$env:TEMP\idm.zip"
        $extractPath = "$env:TEMP\idm"
        7z x -o"$extractPath" "$zipFile" -p"soft98.ir" -y
        Write-Host "IDM extracted to $extractPath"
        Get-ChildItem -Path $extractPath -Recurse | Format-Table -AutoSize

    # Step 5: Install IDM
    - name: Install IDM
      run: |
        $setupPath = Get-ChildItem -Path "$env:TEMP\idm" -Filter "Setup.exe" -Recurse | Select-Object -First 1 -ExpandProperty FullName
        $logFile = "$env:TEMP\idm_install.log"
        
        if (-not $setupPath) {
          Write-Host "::error::Setup.exe not found!"
          exit 1
        }

        Write-Host "Starting installation from $setupPath"
        Start-Process -FilePath "$setupPath" -ArgumentList "/VERYSILENT /SUPPRESSMSGBOXES /NORESTART /LOG=`"$logFile`"" -Wait
        
        # Verify installation
        $idmExePath = "${env:ProgramFiles(x86)}\Internet Download Manager\IDMan.exe"
        if (Test-Path $idmExePath) {
          Write-Host "::group::Installation Log"
          Get-Content $logFile
          Write-Host "::endgroup::"
          Write-Host "IDM installed successfully!"
        } else {
          Write-Host "::error::Installation failed!"
          Write-Host "::group::Installation Log"
          Get-Content $logFile
          Write-Host "::endgroup::"
          exit 1
        }

    # Step 6: Apply Crack
    - name: Apply Crack
      run: |
        $idmPath = "${env:ProgramFiles(x86)}\Internet Download Manager"
        $crackFiles = Get-ChildItem -Path "$env:TEMP\idm" -Recurse -Include ("idman.exe","IDMGrHlp.exe","IDMCC.exe")
        
        if ($crackFiles.Count -eq 0) {
          Write-Host "::error::No crack files found!"
          exit 1
        }

        foreach ($file in $crackFiles) {
          try {
            Copy-Item -Path $file.FullName -Destination "$idmPath\$($file.Name)" -Force
            Write-Host "Copied: $($file.Name)"
          } catch {
            Write-Host "::error::Failed to copy $($file.Name)"
            exit 1
          }
        }
        Write-Host "Crack applied successfully"

    # Step 7: Windows Defender Exclusions
    - name: Add Windows Defender Exclusions
      run: |
        try {
          Add-MpPreference -ExclusionPath "${env:ProgramFiles(x86)}\Internet Download Manager"
          Add-MpPreference -ExclusionProcess "IDMan.exe"
          Write-Host "Windows Defender exclusions added successfully"
        } catch {
          Write-Host "::warning::Failed to add Windows Defender exclusions"
        }

    # Step 8: Import Registry Key
    - name: Import Registry Key
      run: |
        $keyFile = if ([Environment]::Is64BitOperatingSystem) {
          Get-ChildItem -Path "$env:TEMP\idm" -Filter "Key_64bit.reg" -Recurse | Select-Object -First 1 -ExpandProperty FullName
        } else {
          Get-ChildItem -Path "$env:TEMP\idm" -Filter "Key_32bit.reg" -Recurse | Select-Object -First 1 -ExpandProperty FullName
        }

        if ($keyFile) {
          Start-Process -FilePath "regedit.exe" -ArgumentList "/s `"$keyFile`"" -Wait
          Write-Host "Registry key imported successfully"
        } else {
          Write-Host "::warning::Registry key file not found"
        }

    # Step 9: Verify Installation
    - name: Verify IDM Installation
      run: |
        $idmExePath = "${env:ProgramFiles(x86)}\Internet Download Manager\IDMan.exe"
        
        # Check file version
        $version = (Get-Item $idmExePath).VersionInfo.FileVersion
        Write-Host "IDM Version: $version"

        # Check running processes
        $process = Get-Process -Name "IDMan" -ErrorAction SilentlyContinue
        if ($process) {
          Write-Host "IDM is running (PID: $($process.Id))"
        } else {
          Write-Host "IDM is not running (normal for silent install)"
        }

        # Check registry entries
        $regKey = "HKLM:\SOFTWARE\Internet Download Manager"
        if (Test-Path $regKey) {
          Get-ItemProperty $regKey | Format-List
          Write-Host "IDM registry entries exist"
        } else {
          Write-Host "::warning::IDM registry entries not found"
        }

    # Step 10: Create Desktop Shortcuts
    - name: Create Desktop Shortcuts
      run: |
        $WshShell = New-Object -ComObject WScript.Shell
        $desktopPath = [System.Environment]::GetFolderPath('Desktop')

        # IDM Shortcut
        $idmShortcut = "$desktopPath\IDM.lnk"
        $Shortcut = $WshShell.CreateShortcut($idmShortcut)
        $Shortcut.TargetPath = "${env:ProgramFiles(x86)}\Internet Download Manager\IDMan.exe"
        $Shortcut.WorkingDirectory = "${env:ProgramFiles(x86)}\Internet Download Manager"
        $Shortcut.Save()
        Write-Host "IDM shortcut created"

        # Cleanup Shortcut
        $cleanupScript = @'
        Remove-Item -Path "${env:ProgramFiles(x86)}\Internet Download Manager" -Recurse -Force
        Remove-Item -Path "$env:TEMP\idm" -Recurse -Force
        Write-Host "Cleanup completed"
        '@
        Set-Content -Path "$env:TEMP\cleanup.ps1" -Value $cleanupScript

        $cleanupShortcut = "$desktopPath\Cleanup IDM.lnk"
        $Shortcut = $WshShell.CreateShortcut($cleanupShortcut)
        $Shortcut.TargetPath = "powershell.exe"
        $Shortcut.Arguments = "-ExecutionPolicy Bypass -File `"$env:TEMP\cleanup.ps1`""
        $Shortcut.Save()
        Write-Host "Cleanup shortcut created"

    # Step 11: Setup Ngrok Tunnel
    - name: Setup Ngrok Tunnel
      run: |
        # Download ngrok
        Invoke-WebRequest https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip -OutFile "$env:TEMP\ngrok.zip"
        Expand-Archive -Path "$env:TEMP\ngrok.zip" -DestinationPath "$env:TEMP\ngrok" -Force
        
        # Authenticate
        .\$env:TEMP\ngrok\ngrok.exe authtoken $Env:NGROK_AUTH_TOKEN
        Write-Host "Ngrok authenticated"

        # Create tunnel shortcut
        $WshShell = New-Object -ComObject WScript.Shell
        $shortcut = $WshShell.CreateShortcut("$env:Public\Desktop\Start RDP Tunnel.lnk")
        $shortcut.TargetPath = "cmd.exe"
        $shortcut.Arguments = "/k `"$env:TEMP\ngrok\ngrok.exe tcp 3389`""
        $shortcut.IconLocation = "shell32.dll,38"
        $shortcut.Save()
        Write-Host "Tunnel shortcut created"

        # Start tunnel
        Start-Process -FilePath "$env:TEMP\ngrok\ngrok.exe" -ArgumentList "tcp 3389"
        Write-Host "Tunnel started"
      env:
        NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
