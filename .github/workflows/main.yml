name: CI

on: [push, workflow_dispatch]

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Download ngrok
      run: Invoke-WebRequest https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip -OutFile ngrok.zip
      
    - name: Extract ngrok
      run: Expand-Archive ngrok.zip
      
    - name: Authenticate ngrok
      run: .\ngrok\ngrok.exe authtoken $Env:NGROK_AUTH_TOKEN
      env:
        NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
        
    - name: Enable Remote Desktop
      run: |
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 1
        
    - name: Create Admin User
      run: Set-LocalUser -Name "runneradmin" -Password (ConvertTo-SecureString -AsPlainText "Shahid@123" -Force)
      
    # ========== IDM Installation Steps ==========
    - name: Download IDM
      run: |
        $url = "https://dl2.soft98.ir/soft/i/Internet.Download.Manager.6.42.42.Final.zip?1754166781"
        Invoke-WebRequest -Uri $url -OutFile idm.zip
        
    - name: Extract IDM
      run: |
        7z x idm.zip -oidm -p"soft98.ir"
        # Verify extraction
        Get-ChildItem -Path .\idm -Recurse | Format-Table -AutoSize
        
    - name: Install IDM
  run: |
    # Find Setup.exe recursively
    $idmSetup = Get-ChildItem -Path .\idm -Filter "Setup.exe" -Recurse | Select-Object -First 1 -ExpandProperty FullName
    
    if ($null -eq $idmSetup) {
      Write-Host "::error::IDM Setup.exe not found!"
      Get-ChildItem -Path .\idm -Recurse | Format-Table -AutoSize
      exit 1
    }

    Write-Host "Found IDM Setup at: $idmSetup"
    
    # Run installation with verbose logging
    $installLog = "$env:TEMP\idm_install.log"
    Start-Process -FilePath "$idmSetup" -ArgumentList "/VERYSILENT /SUPPRESSMSGBOXES /LOG=`"$installLog`"" -Wait -NoNewWindow
    
    # Verify installation
    $idmPath = "${env:ProgramFiles(x86)}\Internet Download Manager\IDMan.exe"
    if (Test-Path $idmPath) {
      Write-Host "::group::IDM Installation Log"
      Get-Content $installLog
      Write-Host "::endgroup::"
      Write-Host "IDM successfully installed!"
    } else {
      Write-Host "::error::IDM installation failed!"
      Write-Host "::group::Installation Log"
      Get-Content $installLog
      Write-Host "::endgroup::"
      exit 1
    }
    
    # Additional verification steps
    Start-Sleep -Seconds 5
    $idmProcess = Get-Process -Name "IDMan" -ErrorAction SilentlyContinue
    if ($null -ne $idmProcess) {
      Write-Host "IDM process is running (PID: $($idmProcess.Id))"
    } else {
      Write-Host "IDM process not running (expected after silent install)"
    }
        
    - name: Copy Crack Files
      run: |
        $idmPath = "${env:ProgramFiles(x86)}\Internet Download Manager"
        # Find Crack folder in any subfolder
        $crackFolder = Get-ChildItem -Path .\idm -Directory -Filter "Crack" -Recurse | Select-Object -First 1 -ExpandProperty FullName
        if ($null -ne $crackFolder) {
            Write-Host "Found crack files at: $crackFolder"
            Copy-Item -Path "$crackFolder\*" -Destination $idmPath -Recurse -Force
        } else {
            Write-Host "ERROR: Crack folder not found"
            exit 1
        }
        
    - name: Run Defender Exclusion
      run: |
        # Find defender script in any subfolder
        $defenderScript = Get-ChildItem -Path .\idm -Filter "add_exclusion_windows_defender.cmd" -Recurse | Select-Object -First 1 -ExpandProperty FullName
        if ($null -ne $defenderScript) {
            Write-Host "Found defender script at: $defenderScript"
            Start-Process -FilePath "cmd.exe" -ArgumentList "/c `"$defenderScript`"" -Wait
        } else {
            Write-Host "WARNING: Defender exclusion script not found"
        }
        
    - name: Import Registry Key
      run: |
        # Find Key folder in any subfolder
        $keyFolder = Get-ChildItem -Path .\idm -Directory -Filter "Key" -Recurse | Select-Object -First 1 -ExpandProperty FullName
        if ($null -ne $keyFolder) {
            if ([Environment]::Is64BitOperatingSystem) {
                $keyFile = "$keyFolder\Key_64bit.reg"
            } else {
                $keyFile = "$keyFolder\Key_32bit.reg"
            }
            
            if (Test-Path $keyFile) {
                Write-Host "Found registry key at: $keyFile"
                Start-Process -FilePath "regedit.exe" -ArgumentList "/s `"$keyFile`"" -Wait
            } else {
                Write-Host "WARNING: Registry key file not found at: $keyFile"
            }
        } else {
            Write-Host "WARNING: Key folder not found"
        }
    # ========== End IDM Steps ==========
        
    - name: Create Cleanup Script
      run: |
        $cleanupScript = @'
        # Disable Recycle Bin for all drives
        Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\BitBucket" -Name "NukeOnDelete" -Type DWord -Value 1
        
        # List of directories to delete
        $directories = @(
            "C:\ghcup",
            "C:\rtools45",
            "C:\Julia",
            "C:\Miniconda",
            "C:\mingw64",
            "C:\mingw32",
            "C:\Strawberry",
            "C:\msys64",
            "C:\tools",
            "C:\vcpkg",
            "C:\npm",
            "C:\ProgramData\Package Cache",
            "C:\ProgramData\chocolatey",
            "C:\ProgramData\Epic",
            "C:\ProgramData\docker",
            "C:\Program Files\LLVM",
            "C:\Program Files\Azure Cosmos DB Emulator",
            "C:\Program Files\MongoDB",
            "C:\Program Files\PostgreSQL",
            "C:\Program Files\Unity Hub",
            "C:\Program Files\Microsoft Service Fabric",
            "C:\Program Files\MySQL",
            "C:\Program Files\Amazon",
            "C:\Program Files\Git",
            "C:\Program Files\Android",
            "C:\Program Files\R",
            "C:\Program Files\CMake",
            "C:\Program Files\dotnet",
            "C:\Program Files\Microsoft Visual Studio",
            "C:\Program Files (x86)\Microsoft Visual Studio",
            "C:\Program Files (x86)\dotnet",
            "C:\Program Files (x86)\Epic Games",
            "C:\Program Files (x86)\Microsoft Analysis Services",
            "C:\Program Files (x86)\WiX Toolset v3.14",
            "C:\Program Files (x86)\Visual Studio",
            "C:\Program Files (x86)\Windows Kits",
            "C:\Program Files (x86)\Android"
            "C:\Users\installer\AppData\Local\Temp"
            "C:\Users\installer\AppData\Local\unityhub-updater"
            "C:\Users\installer\AppData\Local\Epic Games"
            "C:\Users\Default\.rustup"
        )
        
        $total = $directories.Count
        $completed = 0
        $successCount = 0
        $skippedCount = 0
        
        function Remove-All {
            param([string]$Path)
            $responseFile = [System.IO.Path]::GetTempFileName()
            Set-Content $responseFile -Value "Y`nY`nY`nY`nY`nY`nY`nY`nY`nY`nY"
            try {
                cmd /c "del /f/s/q/a `"$Path`" < `"$responseFile`" 2>&1"
                cmd /c "rd /s/q `"$Path`" < `"$responseFile`" 2>&1"
                return $true
            }
            catch { return $false }
            finally { Remove-Item $responseFile -ErrorAction SilentlyContinue }
        }
        
        foreach ($dir in $directories) {
            $completed++
            $percentComplete = [math]::Round(($completed / $total) * 100)
            Write-Progress -Activity "Cleaning System" -Status "Deleting: $dir" -PercentComplete $percentComplete -CurrentOperation "$completed of $total directories ($percentComplete%)"
            if (Test-Path $dir) {
                if (Remove-All -Path $dir) { $successCount++ }
                else { $skippedCount++ }
            }
            else { $skippedCount++ }
        }
        
        Write-Host "`nCleanup Summary:" -ForegroundColor Cyan
        Write-Host "Successfully deleted: $successCount directories" -ForegroundColor Green
        Write-Host "Skipped: $skippedCount directories" -ForegroundColor Yellow
        Write-Host "Total processed: $completed of $total directories" -ForegroundColor White
        Write-Host "`nOperation completed. Press any key to close this window..."
        $null = $Host.UI.RawUI.ReadKey('NoEcho,IncludeKeyDown')
        '@
        Set-Content -Path "C:\Cleanup.ps1" -Value $cleanupScript -Encoding UTF8
        
    - name: Create Desktop Shortcuts
      run: |
        $WshShell = New-Object -ComObject WScript.Shell
        # Cleanup Shortcut
        $shortcut = $WshShell.CreateShortcut("$env:Public\Desktop\Run Cleanup.lnk")
        $shortcut.TargetPath = "powershell.exe"
        $shortcut.Arguments = "-NoExit -ExecutionPolicy Bypass -File `"C:\Cleanup.ps1`""
        $shortcut.IconLocation = "imageres.dll,99"
        $shortcut.Save()
        # Tunnel Shortcut
        $tunnelShortcut = $WshShell.CreateShortcut("$env:Public\Desktop\Start Tunnel.lnk")
        $tunnelShortcut.TargetPath = "cmd.exe"
        $tunnelShortcut.Arguments = "/k `"C:\ngrok\ngrok.exe tcp 3389`""
        $tunnelShortcut.IconLocation = "shell32.dll,38"
        $tunnelShortcut.Save()
        
    - name: Start ngrok Tunnel
      run: .\ngrok\ngrok.exe tcp 3389
