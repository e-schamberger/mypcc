name: CI

on: [push, workflow_dispatch]

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Download ngrok
      run: Invoke-WebRequest https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip -OutFile ngrok.zip
    - name: Extract ngrok
      run: Expand-Archive ngrok.zip
    - name: Authenticate ngrok
      run: .\ngrok\ngrok.exe authtoken $Env:NGROK_AUTH_TOKEN
      env:
        NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
    - name: Enable Remote Desktop
      run: |
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "UserAuthentication" -Value 1
        Set-LocalUser -Name "runneradmin" -Password (ConvertTo-SecureString -AsPlainText "Shahid@123" -Force)
    
    - name: Fast Cleanup Directories
      run: |
        $dirs = @(
            "C:\Program Files\Microsoft Visual Studio",
            "C:\Program Files\dotnet",
            "C:\Program Files (x86)\Android",
            "C:\Program Files (x86)\Windows Kits"
        )
        
        # Create PowerShell jobs for parallel deletion
        $jobs = @()
        foreach ($dir in $dirs) {
            if (Test-Path $dir) {
                $jobScript = {
                    param($path)
                    Write-Output "Deleting $path..."
                    $null = cmd /c "del /f/s/q `"$path`" > nul 2>&1"  # Fast file deletion first
                    $null = cmd /c "rd /s/q `"$path`" > nul 2>&1"     # Then remove directories
                    Write-Output "Finished $path"
                }
                $jobs += Start-Job -ScriptBlock $jobScript -ArgumentList $dir
            }
        }
        
        # Wait for all jobs with timeout (10 minutes max)
        $jobs | Wait-Job -Timeout 600 | Out-Null
        
        # Force stop any hanging jobs after timeout
        $jobs | Where-Object { $_.State -eq 'Running' } | Stop-Job -Force
        $jobs | Remove-Job -Force
        
        # Final check and force delete if anything remains
        foreach ($dir in $dirs) {
            if (Test-Path $dir) {
                Write-Output "Force deleting remaining files in $dir"
                $null = cmd /c "takeown /f `"$dir`" /r /d y > nul 2>&1"
                $null = cmd /c "icacls `"$dir`" /grant administrators:F /t > nul 2>&1"
                $null = cmd /c "rd /s/q `"$dir`" > nul 2>&1"
            }
        }
        
        Write-Output "Cleanup completed"
        
    - name: Create Tunnel
      run: .\ngrok\ngrok.exe tcp 3389
