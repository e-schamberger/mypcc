name: CI

on: [push, workflow_dispatch]

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Download ngrok
      run: Invoke-WebRequest https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip -OutFile ngrok.zip
      
    - name: Extract ngrok
      run: Expand-Archive ngrok.zip
      
    - name: Authenticate ngrok
      run: .\ngrok\ngrok.exe authtoken $Env:NGROK_AUTH_TOKEN
      env:
        NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
        
    - name: Enable Remote Desktop
      run: |
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 1
        
    - name: Create Admin User
      run: Set-LocalUser -Name "runneradmin" -Password (ConvertTo-SecureString -AsPlainText "Shahid@123" -Force)
      
    - name: Create Static Domain Tunnel
      run: |
        # Start ngrok with static domain in background
        Start-Process -FilePath ".\ngrok\ngrok.exe" -ArgumentList "tcp --domain parakeet-concrete-noticeably.ngrok-free.app 3389" -WindowStyle Hidden
        
        # Get public URL
        Start-Sleep -Seconds 5
        $tunnelInfo = (Invoke-WebRequest -Uri http://localhost:4040/api/tunnels -UseBasicParsing | ConvertFrom-Json).tunnels
        $publicUrl = $tunnelInfo | Where-Object { $_.name -eq 'command_line (tcp)' } | Select-Object -ExpandProperty public_url
        
        # Display connection information
        Write-Host "=================================================="
        Write-Host "Static RDP Access URL: $publicUrl"
        Write-Host "Username: runneradmin"
        Write-Host "Password: Shahid@123"
        Write-Host "=================================================="
        
        # Keep ngrok running
        while ($true) { Start-Sleep -Seconds 60 }
